/*
    -- Problem 2 --

        Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

        1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

        By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.


*/

fun main() {

    var fibonacciArray: IntArray = intArrayOf(
        1,
        2
    ) // Sequence starts with the numbers 1 and 2. So the first two elements of fibonacci array must be initialized as 1 and 2.
    var limit: Int =
        4_000_000 // Limit is the number we do not want to exceed. 4.000.000 is the number problem sets as the limit.
    var limitChecker: Int =
        0 // Increases with every sum operation and checks if the last element of the sequence exceeded the limit.
    var t1: Int = 1
    var t2: Int = 2


    while (limitChecker < limit) {

        var sum: Int = t1 + t2

        t1 = t2
        t2 = sum

        if (sum < limit) {
            fibonacciArray += sum
        }
        limitChecker = sum
    }


    // Print each term of the created fibonacci sequence in order

    fibonacciArray.forEach { println("Term ${fibonacciArray.indexOf(it) + 1}: $it") }


    // Find the even elements in fibonacci sequence array and assign them into a different array.
    println("")
    var evenNumbers: IntArray = intArrayOf()

    for (n in fibonacciArray) {
        if (n % 2 == 0) {
            evenNumbers += n
        }
    }
    // Print each term of the created even numbers array in order

    evenNumbers.forEach { println("Even number ${evenNumbers.indexOf(it) + 1}: $it") }

    println("Sum of the even-valued terms: ${evenNumbers.sum()}")

}